# Filtering

filter
fun <K, V> Map<out K, V>.filter(
    predicate: (Entry<K, V>) -> Boolean
): Map<K, V>
Returns a new map containing all key-value pairs matching the given predicate.

fun <T> Iterable<T>.filter(
    predicate: (T) -> Boolean
): List<T>
Returns a list containing only elements matching the given predicate.


filterKeys
fun <K, V> Map<out K, V>.filterKeys(
    predicate: (K) -> Boolean
): Map<K, V>
Returns a map containing all key-value pairs with keys matching the given predicate.
filterValues
fun <K, V> Map<out K, V>.filterValues(
    predicate: (V) -> Boolean
): Map<K, V>
Returns a map containing all key-value pairs with values matching the given predicate.


filterIndexed
fun <T> Iterable<T>.filterIndexed(
    predicate: (index: Int, T) -> Boolean
): List<T>
Returns a list containing only elements matching the given predicate.
filterIndexedTo
fun <T, C : MutableCollection<in T>> Iterable<T>.filterIndexedTo(
    destination: C,
    predicate: (index: Int, T) -> Boolean
): C
Appends all elements matching the given predicate to the given destination.
filterIsInstance
fun <R> Iterable<*>.filterIsInstance(): List<R>
Returns a list containing all elements that are instances of specified type parameter R.

fun <R> Iterable<*>.filterIsInstance(
    klass: Class<R>
): List<R>
Returns a list containing all elements that are instances of specified class.
filterIsInstanceTo
fun <R, C : MutableCollection<in R>> Iterable<*>.filterIsInstanceTo(
    destination: C
): C
fun <R, C : MutableCollection<in R>> Array<*>.filterIsInstanceTo(
    destination: C
): C
Appends all elements that are instances of specified type parameter R to the given destination.

fun <C : MutableCollection<in R>, R> Iterable<*>.filterIsInstanceTo(
    destination: C,
    klass: Class<R>
): C
fun <C : MutableCollection<in R>, R> Array<*>.filterIsInstanceTo(
    destination: C,
    klass: Class<R>
): C
Appends all elements that are instances of specified class to the given destination.
filterTo
fun <K, V, M : MutableMap<in K, in V>> Map<out K, V>.filterTo(
    destination: M,
    predicate: (Entry<K, V>) -> Boolean
): M
Appends all entries matching the given predicate into the mutable map given as destination parameter.

fun <T, C : MutableCollection<in T>> Iterable<T>.filterTo(
    destination: C,
    predicate: (T) -> Boolean
): C



Inverse:

filterNot
fun <T> Iterable<T>.filterNot(
    predicate: (T) -> Boolean
): List<T>
Returns a list containing all elements not matching the given predicate.

filterNotNull
fun <T : Any> Iterable<T?>.filterNotNull(): List<T>
Returns a list containing all elements that are not null.

filterNotNullTo
fun <C : MutableCollection<in T>, T : Any> Iterable<T?>.filterNotNullTo(
    destination: C
): C
Appends all elements that are not null to the given destination.

filterNotTo
fun <T, C : MutableCollection<in T>> Iterable<T>.filterNotTo(
    destination: C,
    predicate: (T) -> Boolean
): C
Appends all elements not matching the given predicate to the given destination.




# Taking


take
fun <T> Iterable<T>.take(n: Int): List<T>

takeLast
fun <T> List<T>.takeLast(n: Int): List<T>

takeLastWhile
fun <T> List<T>.takeLastWhile(
    predicate: (T) -> Boolean
): List<T>
Returns a list containing last elements satisfying the given predicate.

takeWhile
fun <T> Iterable<T>.takeWhile(
    predicate: (T) -> Boolean
): List<T>
Returns a list containing first elements satisfying the given predicate.


Inverse:

drop
fun <T> Iterable<T>.drop(n: Int): List<T>
Returns a list containing all elements except first n elements.
dropLast
fun <T> List<T>.dropLast(n: Int): List<T>
Returns a list containing all elements except last n elements.
dropLastWhile
fun <T> List<T>.dropLastWhile(
    predicate: (T) -> Boolean
): List<T>
Returns a list containing all elements except last elements that satisfy the given predicate.
dropWhile
fun <T> Iterable<T>.dropWhile(
    predicate: (T) -> Boolean
): List<T>
Returns a list containing all elements except first elements that satisfy the given predicate.



# Getting elements


component1
operator fun <T> List<T>.component1(): T
Returns 1st element from the collection.
component2
operator fun <T> List<T>.component2(): T
Returns 2nd element from the collection.
component3
operator fun <T> List<T>.component3(): T
Returns 3rd element from the collection.
component4
operator fun <T> List<T>.component4(): T
Returns 4th element from the collection.
component5
operator fun <T> List<T>.component5(): T
Returns 5th element from the collection.

For map comp1 = key, comp2 = value


elementAt
fun <T> Iterable<T>.elementAt(index: Int): T
Returns an element at the given index or throws an IndexOutOfBoundsException if the index is out of bounds of this collection.

elementAtOrElse
fun <T> Iterable<T>.elementAtOrElse(
    index: Int,
    defaultValue: (Int) -> T
): T
Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this collection.

elementAtOrNull
fun <T> Iterable<T>.elementAtOrNull(index: Int): T?
Returns an element at the given index or null if the index is out of bounds of this collection.

get
operator fun <K, V> Map<out K, V>.get(key: K): V?
Returns the value corresponding to the given key, or null if such a key is not present in the map.

getOrDefault
fun <K, V> Map<out K, V>.getOrDefault(
    key: K,
    defaultValue: V
): V
Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.

getOrElse
fun <K, V> Map<K, V>.getOrElse(
    key: K,
    defaultValue: () -> V
): V
Returns the value for the given key, or the result of the defaultValue function if there was no entry for the given key.

fun <T> List<T>.getOrElse(
    index: Int,
    defaultValue: (Int) -> T
): T
Returns an element at the given index or the result of calling the defaultValue function if the index is out of bounds of this list.

getOrNull
fun <T> List<T>.getOrNull(index: Int): T?
Returns an element at the given index or null if the index is out of bounds of this list.

getOrPut
fun <K, V> MutableMap<K, V>.getOrPut(
    key: K,
    defaultValue: () -> V
): V
Returns the value for the given key. If the key is not found in the map, calls the defaultValue function, puts its result into the map under the given key and returns it.

getValue
operator fun <V, V1 : V> Map<in String, V>.getValue(
    thisRef: Any?,
    property: KProperty<*>
): V1
Returns the value of the property for the given object from this read-only map.


fun <K, V> Map<K, V>.getValue(key: K): V
Returns the value for the given key or throws an exception if there is no such key in the map.




Finding:

binarySearch
fun <T : Comparable<T>> List<T?>.binarySearch(
    element: T?,
    fromIndex: Int = 0,
    toIndex: Int = size
): Int
Searches this list or its range for the provided element using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of its elements, otherwise the result is undefined.

binarySearchBy
fun <T, K : Comparable<K>> List<T>.binarySearchBy(
    key: K?,
    fromIndex: Int = 0,
    toIndex: Int = size,
    selector: (T) -> K?
): Int
Searches this list or its range for an element having the key returned by the specified selector function equal to the provided key value using the binary search algorithm. The list is expected to be sorted into ascending order according to the Comparable natural ordering of keys of its elements. otherwise the result is undefined.


find
fun <T> Iterable<T>.find(predicate: (T) -> Boolean): T?
Returns the first element matching the given predicate, or null if no such element was found.

findLast
fun <T> Iterable<T>.findLast(predicate: (T) -> Boolean): T?
Returns the last element matching the given predicate, or null if no such element was found.

first
fun <T> Iterable<T>.first(): T
Returns first element.

fun <T> Iterable<T>.first(predicate: (T) -> Boolean): T
Returns the first element matching the given predicate.

firstOrNull
fun <T> Iterable<T>.firstOrNull(): T?
Returns the first element, or null if the collection is empty.

fun <T> Iterable<T>.firstOrNull(
    predicate: (T) -> Boolean
): T?
Returns the first element matching the given predicate, or null if element was not found.

indexOf
fun <T> Iterable<T>.indexOf(element: T): Int
Returns first index of element, or -1 if the collection does not contain element.

indexOfFirst
fun <T> Iterable<T>.indexOfFirst(
    predicate: (T) -> Boolean
): Int
Returns index of the first element matching the given predicate, or -1 if the collection does not contain such element.


indexOfLast
fun <T> Iterable<T>.indexOfLast(
    predicate: (T) -> Boolean
): Int
Returns index of the last element matching the given predicate, or -1 if the collection does not contain such element.

last
fun <T> Iterable<T>.last(): T
Returns the last element.

fun <T> Iterable<T>.last(predicate: (T) -> Boolean): T
Returns the last element matching the given predicate.


lastIndexOf
fun <T> Iterable<T>.lastIndexOf(element: T): Int
Returns last index of element, or -1 if the collection does not contain element.
lastOrNull
fun <T> Iterable<T>.lastOrNull(): T?
Returns the last element, or null if the collection is empty.

fun <T> Iterable<T>.lastOrNull(predicate: (T) -> Boolean): T?
Returns the last element matching the given predicate, or null if no such element was found.



# Duplicate handling etc.


distinct
fun <T> Iterable<T>.distinct(): List<T>
Returns a list containing only distinct elements from the given collection.

fun <T> any_array<T>.distinct(): List<T>
Returns a list containing only distinct elements from the given array.
distinctBy
fun <T, K> Iterable<T>.distinctBy(
    selector: (T) -> K
): List<T>
Returns a list containing only elements from the given collection having distinct keys returned by the given selector function.

fun <T, K> any_array<T>.distinctBy(
    selector: (T) -> K
): List<T>
Returns a list containing only elements from the given array having distinct keys returned by the given selector function.

intersect
infix fun <T> Iterable<T>.intersect(
    other: Iterable<T>
): Set<T>
Returns a set containing all elements that are contained by both this set and the specified collection.

minusElement
fun <T> Iterable<T>.minusElement(element: T): List<T>
Returns a list containing all elements of the original collection without the first occurrence of the given element.

requireNoNulls
fun <T : Any> Iterable<T?>.requireNoNulls(): Iterable<T>
fun <T : Any> List<T?>.requireNoNulls(): List<T>
fun <T : Any> Array<T?>.requireNoNulls(): Array<T>
Returns an original collection containing all the non-null elements, throwing an IllegalArgumentException if there are any null elements.

retainAll
fun <T> MutableCollection<out T>.retainAll(
    elements: Collection<T>
): Boolean
Retains only the elements in this collection that are contained in the specified collection.

fun <T> MutableIterable<T>.retainAll(
    predicate: (T) -> Boolean
): Boolean
Retains only elements of this MutableIterable that match the given predicate.


single
fun <T> Iterable<T>.single(): T
Returns the single element, or throws an exception if the collection is empty or has more than one element.
fun <T> Iterable<T>.single(predicate: (T) -> Boolean): T

singleOrNull
fun <T> Iterable<T>.singleOrNull(): T?
Returns single element, or null if the collection is empty or has more than one element.


