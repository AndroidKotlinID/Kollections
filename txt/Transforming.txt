associate
fun <T, K, V> Iterable<T>.associate(
    transform: (T) -> Pair<K, V>
): Map<K, V>
Returns a Map containing key-value pairs provided by transform function applied to elements of the given collection.

associateBy
fun <T, K> Iterable<T>.associateBy(
    keySelector: (T) -> K
): Map<K, T>
Returns a Map containing the elements from the given collection indexed by the key returned from keySelector function applied to each element.

associateByTo
fun <T, K, M : MutableMap<in K, in T>> Iterable<T>.associateByTo(
    destination: M,
    keySelector: (T) -> K
): M
Populates and returns the destination mutable map with key-value pairs, where key is provided by the keySelector function applied to each element of the given collection and value is the element itself.

associateTo
fun <T, K, V, M : MutableMap<in K, in V>> Iterable<T>.associateTo(
    destination: M,
    transform: (T) -> Pair<K, V>
): M
Populates and returns the destination mutable map with key-value pairs provided by transform function applied to each element of the given collection.

flatMap
fun <T, R> Iterable<T>.flatMap(
    transform: (T) -> Iterable<R>
): List<R>
Returns a single list of all elements yielded from results of transform function being invoked on each element of original collection.

flatMapTo
fun <T, R, C : MutableCollection<in R>> Iterable<T>.flatMapTo(
    destination: C,
    transform: (T) -> Iterable<R>
): C
Appends all elements yielded from results of transform function being invoked on each element of original collection, to the given destination.

flatten
fun <T> Array<out Array<out T>>.flatten(): List<T>
Returns a single list of all elements from all arrays in the given array.



unzip
fun <T, R> Array<out Pair<T, R>>.unzip(): Pair<List<T>, List<R>>
Returns a pair of lists, where first list is built from the first values of each pair from this array, second list is built from the second values of each pair from this array.

fun <T, R> Iterable<Pair<T, R>>.unzip(): Pair<List<T>, List<R>>
Returns a pair of lists, where first list is built from the first values of each pair from this collection, second list is built from the second values of each pair from this collection.



map
fun <T, R> Iterable<T>.map(transform: (T) -> R): List<R>
Returns a list containing the results of applying the given transform function to each element in the original collection.

fun <K, V, R> Map<out K, V>.map(
    transform: (Entry<K, V>) -> R
): List<R>
Returns a list containing the results of applying the given transform function to each entry in the original map.

mapIndexed
fun <T, R> Iterable<T>.mapIndexed(
    transform: (index: Int, T) -> R
): List<R>
Returns a list containing the results of applying the given transform function to each element and its index in the original collection.

mapIndexedNotNull
fun <T, R : Any> Iterable<T>.mapIndexedNotNull(
    transform: (index: Int, T) -> R?
): List<R>
Returns a list containing only the non-null results of applying the given transform function to each element and its index in the original collection.

mapIndexedNotNullTo
fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapIndexedNotNullTo(
    destination: C,
    transform: (index: Int, T) -> R?
): C
Applies the given transform function to each element and its index in the original collection and appends only the non-null results to the given destination.

mapIndexedTo
fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapIndexedTo(
    destination: C,
    transform: (index: Int, T) -> R
): C
Applies the given transform function to each element and its index in the original collection and appends the results to the given destination.

mapKeys
fun <K, V, R> Map<out K, V>.mapKeys(
    transform: (Entry<K, V>) -> R
): Map<R, V>
Returns a new Map with entries having the keys obtained by applying the transform function to each entry in this Map and the values of this map.

mapKeysTo
fun <K, V, R, M : MutableMap<in R, in V>> Map<out K, V>.mapKeysTo(
    destination: M,
    transform: (Entry<K, V>) -> R
): M
Populates the given destination map with entries having the keys obtained by applying the transform function to each entry in this Map and the values of this map.

mapNotNull
fun <T, R : Any> Iterable<T>.mapNotNull(
    transform: (T) -> R?
): List<R>
Returns a list containing only the non-null results of applying the given transform function to each element in the original collection.

mapNotNullTo
fun <T, R : Any, C : MutableCollection<in R>> Iterable<T>.mapNotNullTo(
    destination: C,
    transform: (T) -> R?
): C
Applies the given transform function to each element in the original collection and appends only the non-null results to the given destination.

mapTo
fun <T, R, C : MutableCollection<in R>> Iterable<T>.mapTo(
    destination: C,
    transform: (T) -> R
): C
Applies the given transform function to each element of the original collection and appends the results to the given destination.

mapValues
fun <K, V, R> Map<out K, V>.mapValues(
    transform: (Entry<K, V>) -> R
): Map<K, R>
Returns a new map with entries having the keys of this map and the values obtained by applying the transform function to each entry in this Map.

mapValuesTo
fun <K, V, R, M : MutableMap<in K, in R>> Map<out K, V>.mapValuesTo(
    destination: M,
    transform: (Entry<K, V>) -> R
): M
Populates the given destination map with entries having the keys of this map and the values obtained by applying the transform function to each entry in this Map.

reverse
fun <T> MutableList<T>.reverse()
Reverses elements in the list in-place.

reversed
fun <T> Iterable<T>.reversed(): List<T>


partition
fun <T> Iterable<T>.partition(
    predicate: (T) -> Boolean
): Pair<List<T>, List<T>>
Splits the original collection into pair of lists, where first list contains elements for which predicate yielded true, while second list contains elements for which predicate yielded false.

plusElement
fun <T> Iterable<T>.plusElement(element: T): List<T>
Returns a list containing all elements of the original collection and then the given element.

slice
fun <T> List<T>.slice(indices: Iterable<Int>): List<T>
Returns a list containing elements at indices in the specified indices range.


sorted
fun <T : Comparable<T>> Iterable<T>.sorted(): List<T>
Returns a list of all elements sorted according to their natural sort order.




sortedArray
fun <T : Comparable<T>> any_array<T>.sortedArray(): Array<T>
Returns an array with all elements of this array sorted according to their natural sort order.
sortedArrayDescending
fun <T : Comparable<T>> any_array<T>.sortedArrayDescending(): Array<T>
Returns an array with all elements of this array sorted descending according to their natural sort order.



sortedArrayWith
fun <T> any_array<T>.sortedArrayWith(
    comparator: Comparator<in T>
): Array<out T>
Returns an array with all elements of this array sorted according the specified comparator.




sortedBy
fun <T, R : Comparable<R>> Iterable<T>.sortedBy(
    selector: (T) -> R?
): List<T>
Returns a list of all elements sorted according to natural sort order of the value returned by specified selector function.



sortedByDescending
fun <T, R : Comparable<R>> Iterable<T>.sortedByDescending(
    selector: (T) -> R?
): List<T>
Returns a list of all elements sorted descending according to natural sort order of the value returned by specified selector function.



sortedDescending
fun <T : Comparable<T>> Iterable<T>.sortedDescending(): List<T>
Returns a list of all elements sorted descending according to their natural sort order.





sortedMapOf
JVM
fun <K : Comparable<K>, V> sortedMapOf(
    vararg pairs: Pair<K, V>
): SortedMap<K, V>
Returns a new SortedMap with the specified contents, given as a list of pairs where the first value is the key and the second is the value.
sortedSetOf
JVM
fun <T> sortedSetOf(vararg elements: T): TreeSet<T>
Returns a new SortedSet with the given elements.

fun <T> sortedSetOf(
    comparator: Comparator<in T>,
    vararg elements: T
): TreeSet<T>
Returns a new SortedSet with the given comparator and elements.




sortedWith
fun <T> Iterable<T>.sortedWith(
    comparator: Comparator<in T>
): List<T>
Returns a list of all elements sorted according to the specified comparator.


zip
infix fun <T, R> Iterable<T>.zip(
    other: Array<out R>
): List<Pair<T, R>>
Returns a list of pairs built from elements of both collections with same indexes. List has length of shortest collection.

fun <T, R, V> Iterable<T>.zip(
    other: Array<out R>,
    transform: (a: T, b: R) -> V
): List<V>
Returns a list of values built from elements of both collections with same indexes using provided transform. List has length of shortest collection.

