# Reducers and folds

fold
fun <T, R> Iterable<T>.fold(
    initial: R,
    operation: (acc: R, T) -> R
): R
Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element.


foldIndexed
fun <T, R> Iterable<T>.foldIndexed(
    initial: R,
    operation: (index: Int, acc: R, T) -> R
): R
Accumulates value starting with initial value and applying operation from left to right to current accumulator value and each element with its index in the original collection.


foldRight
fun <T, R> List<T>.foldRight(
    initial: R,
    operation: (T, acc: R) -> R
): R
Accumulates value starting with initial value and applying operation from right to left to each element and current accumulator value.

foldRightIndexed
fun <T, R> List<T>.foldRightIndexed(
    initial: R,
    operation: (index: Int, T, acc: R) -> R
): R
Accumulates value starting with initial value and applying operation from right to left to each element with its index in the original list and current accumulator value.

foldTo
1.1
fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.foldTo(
    destination: M,
    initialValueSelector: (key: K, element: T) -> R,
    operation: (key: K, accumulator: R, element: T) -> R
): M
Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given destination map. An initial value of accumulator is provided by initialValueSelector function.

reduce
fun <S, T : S> Iterable<T>.reduce(
    operation: (acc: S, T) -> S
): S

Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element.


reduceIndexed
fun <S, T : S> Iterable<T>.reduceIndexed(
    operation: (index: Int, acc: S, T) -> S
): S
Accumulates value starting with the first element and applying operation from left to right to current accumulator value and each element with its index in the original collection.


reduceRight
fun <S, T : S> List<T>.reduceRight(
    operation: (T, acc: S) -> S
): S

reduceRightIndexed
fun <S, T : S> List<T>.reduceRightIndexed(
    operation: (index: Int, T, acc: S) -> S
): S

Accumulates value starting with last element and applying operation from right to left to each element and current accumulator value.



# Grouping

groupBy
fun <T, K> Iterable<T>.groupBy(
    keySelector: (T) -> K
): Map<K, List<T>>
Groups elements of the original collection by the key returned by the given keySelector function applied to each element and returns a map where each group key is associated with a list of corresponding elements.

fun <T, K, V> Iterable<T>.groupBy(
    keySelector: (T) -> K,
    valueTransform: (T) -> V
): Map<K, List<V>>
Groups values returned by the valueTransform function applied to each element of the original collection by the key returned by the given keySelector function applied to the element and returns a map where each group key is associated with a list of corresponding values.


groupByTo
fun <T, K, M : MutableMap<in K, MutableList<T>>> Iterable<T>.groupByTo(
    destination: M,
    keySelector: (T) -> K
): M
Groups elements of the original collection by the key returned by the given keySelector function applied to each element and puts to the destination map each group key associated with a list of corresponding elements.


groupingBy
1.1
fun <T, K> Iterable<T>.groupingBy(
    keySelector: (T) -> K
): Grouping<T, K>
Creates a Grouping source from a collection to be used later with one of group-and-fold operations using the specified keySelector function to extract a key from each element.


map grouping:

eachCount
1.1
fun <T, K> Grouping<T, K>.eachCount(): Map<K, Int>
Groups elements from the Grouping source by key and counts elements in each group.

eachCountTo
1.1
fun <T, K, M : MutableMap<in K, Int>> Grouping<T, K>.eachCountTo(
    destination: M
): M
Groups elements from the Grouping source by key and counts elements in each group to the given destination map.



# Aggregating

aggregate
1.1
fun <T, K, R> Grouping<T, K>.aggregate(
    operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R
): Map<K, R>
Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in a new map.
aggregateTo
1.1
fun <T, K, R, M : MutableMap<in K, R>> Grouping<T, K>.aggregateTo(
    destination: M,
    operation: (key: K, accumulator: R?, element: T, first: Boolean) -> R
): M
Groups elements from the Grouping source by key and applies operation to the elements of each group sequentially, passing the previously accumulated value and the current element as arguments, and stores the results in the given destination map.


count
fun <T> Iterable<T>.count(): Int
Returns the number of elements in this collection.
fun <T> Iterable<T>.count(predicate: (T) -> Boolean): Int
Returns the number of entries matching the given predicate.

average
fun Iterable<Byte>.average(): Double
Returns an average value of elements in the collection.

max
fun Iterable<Double>.max(): Double?
Returns the largest element or null if there are no elements.
maxBy
fun <T, R : Comparable<R>> Iterable<T>.maxBy(
    selector: (T) -> R
): T?
Returns the first element yielding the largest value of the given function or null if there are no elements.

maxWith
fun <T> Iterable<T>.maxWith(comparator: Comparator<in T>): T?
Returns the first element having the largest value according to the provided comparator or null if there are no elements.

min
fun Iterable<Double>.min(): Double?
Returns the smallest element or null if there are no elements.

minBy
fun <T, R : Comparable<R>> Iterable<T>.minBy(
    selector: (T) -> R
): T?
Returns the first element yielding the smallest value of the given function or null if there are no elements.

fun <K, V, R : Comparable<R>> Map<out K, V>.minBy(
    selector: (Entry<K, V>) -> R
): Entry<K, V>?
Returns the first entry yielding the smallest value of the given function or null if there are no entries.
minWith
fun <T> Iterable<T>.minWith(comparator: Comparator<in T>): T?
Returns the first element having the smallest value according to the provided comparator or null if there are no elements.

sum
fun Iterable<Int>.sum(): Int
Returns the sum of all elements in the collection.




sumBy
fun <T> Iterable<T>.sumBy(selector: (T) -> Int): Int
Returns the sum of all values produced by selector function applied to each element in the collection.




sumByDouble
fun <T> Iterable<T>.sumByDouble(
    selector: (T) -> Double
): Double
Returns the sum of all values produced by selector function applied to each element in the collection.